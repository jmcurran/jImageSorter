package jimagesorter;

import java.io.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.util.*;
import java.util.prefs.Preferences;
import javax.imageio.ImageIO;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jcur002
 */
public class ImageSorterGUI extends javax.swing.JFrame implements KeyListener{

    String strCurrentDirectory;
    List<File> imageFiles;
    ListIterator<File> imageIterator;
    
    TreeMap<Integer, HotkeyDirectoryPair> mapKeyDirs;
    java.util.List<String> Hotkeys;
    
    JImagePanel imagePanel;

     /**
     * Creates new form ImageSorterGUI
     */
    public ImageSorterGUI() {
        initComponents();
        addImagePanel();
        
        
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);

        Preferences prefs = Preferences.userNodeForPackage(this.getClass());
        strCurrentDirectory = prefs.get("CURRENT_WORKING_DIR", null);

        if (strCurrentDirectory == null) {
            strCurrentDirectory = System.getProperty("user.home");
            File f = new File(strCurrentDirectory);
            strCurrentDirectory = f.getAbsolutePath();
            prefs.put("CURRENT_WORKING_DIR", strCurrentDirectory);
        }

        loadHotkeys();

        jLabelCurrentDirectory.setText(strCurrentDirectory);

        imageFiles = getImageList();
        imageIterator = imageFiles.listIterator();
        String strLabel = "# Images: " + imageFiles.size();
        jLabelNumImages.setText(strLabel);
        
        if(imageIterator.hasNext()){
            BufferedImage theImage = null;
            try{
                theImage = ImageIO.read(imageIterator.next());
            }catch(IOException e){
                e.printStackTrace();
            }
            if(theImage != null){
                imagePanel.drawImage(theImage);
            }
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSetDirectory = new javax.swing.JButton();
        jButtonSetClasses = new javax.swing.JButton();
        jLabelCurrentDirectory = new javax.swing.JLabel();
        jLabelNumImages = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonSetDirectory.setText("Set Directory");
        jButtonSetDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetDirectoryActionPerformed(evt);
            }
        });

        jButtonSetClasses.setText("SetClasses");
        jButtonSetClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetClassesActionPerformed(evt);
            }
        });

        jLabelCurrentDirectory.setText("jLabel1");

        jLabelNumImages.setText("# Images:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 288, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabelCurrentDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelNumImages, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButtonSetDirectory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSetClasses)
                        .addGap(164, 164, 164)))
                .addContainerGap(15, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSetDirectory)
                    .addComponent(jButtonSetClasses))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCurrentDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNumImages)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addImagePanel(){
        imagePanel = new JImagePanel(null);
        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 288, Short.MAX_VALUE)
        );
        GroupLayout gl = (GroupLayout)getContentPane().getLayout();
        gl.replace(jPanel1, imagePanel);
        pack();
    }
    private void DeleteImage() throws IOException{
        //imagePanel.draw();
    }
    
    private void MoveImage() throws IOException{
        
    }
    
    private void NextImage() throws IOException{
        if(imageIterator.hasNext()){
            BufferedImage theImage = null;
            try{
                theImage = ImageIO.read(imageIterator.next());
            }catch(IOException e){
                e.printStackTrace();
            }
            if(theImage != null){
                imagePanel.drawImage(theImage);
            }
        }
    }
    
    private void PreviousImage() throws IOException{
        if(imageIterator.hasPrevious()){
            BufferedImage theImage = null;
            try{
                theImage = ImageIO.read(imageIterator.previous());
            }catch(IOException e){
                e.printStackTrace();
            }
            if(theImage != null){
                imagePanel.drawImage(theImage);
            }
        }
    }
    
    private List<File> getImageList() {
        File dir = new File(strCurrentDirectory);
        File[] files = dir.listFiles((File directory, String fileName) -> fileName.toLowerCase().endsWith(".jpg"));

        return new ArrayList<>(Arrays.asList(files));
    }

    private void loadHotkeys() {
        mapKeyDirs = new TreeMap<>();
        Hotkeys = new ArrayList<>();

        Preferences prefs = Preferences.userNodeForPackage(this.getClass());

        for (int i = 1; i <= 10; i++) {
            String suffix = ((i < 10) ? Integer.toString(i) : "0");
            String strHotkeyKey = "KEY" + suffix;
            String strDirKey = "DIR" + suffix;

            String strHotkeyValue = prefs.get(strHotkeyKey, suffix);
            String strDirValue = prefs.get(strDirKey, null);

            Hotkeys.add(strHotkeyValue);

            try {
                mapKeyDirs.put(i, new HotkeyDirectoryPair(strHotkeyValue, strDirValue));
            } catch (InvalidHotkeyException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    

    private void jButtonSetDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetDirectoryActionPerformed
        JFileChooser chooser = new JFileChooser();

        int result;

        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(strCurrentDirectory));
        chooser.setDialogTitle("Select the image directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            strCurrentDirectory = chooser.getSelectedFile().getAbsolutePath();
            jLabelCurrentDirectory.setText(strCurrentDirectory);
            Preferences prefs = Preferences.userNodeForPackage(this.getClass());
            prefs.put("CURRENT_WORKING_DIR", strCurrentDirectory);

            imageFiles = getImageList();
            String strLabel = "# Images: " + imageFiles.size();
            jLabelNumImages.setText(strLabel);

//            try {
//                refreshImageStack();
//            } catch (IOException e) {
//                JOptionPane.showMessageDialog(this,
//                        "IOException while loading images",
//                        "Exception",
//                        JOptionPane.ERROR_MESSAGE);
//            }

        }

    }//GEN-LAST:event_jButtonSetDirectoryActionPerformed

    private void jButtonSetClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetClassesActionPerformed
        SetClassesDlg dlg = new SetClassesDlg(this, true, mapKeyDirs, strCurrentDirectory);
        dlg.pack();
        dlg.setVisible(true);

        if (dlg.result == SetClassesDlg.DialogResult.OK_OPTION) {
            Preferences prefs = Preferences.userNodeForPackage(this.getClass());
            mapKeyDirs.putAll(dlg.getData());

            for (int i = 1; i <= 10; i++) {
                String suffix = ((i < 10) ? Integer.toString(i) : "0");
                String strHotkeyKey = "KEY" + suffix;
                String strDirKey = "DIR" + suffix;

                prefs.put(strHotkeyKey, mapKeyDirs.get(i).getHotkey());
                prefs.put(strDirKey, mapKeyDirs.get(i).getDirectory());
            }
        }
    }//GEN-LAST:event_jButtonSetClassesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageSorterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageSorterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageSorterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageSorterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ImageSorterGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSetClasses;
    private javax.swing.JButton jButtonSetDirectory;
    private javax.swing.JLabel jLabelCurrentDirectory;
    private javax.swing.JLabel jLabelNumImages;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent ke) {
     }

    @Override
    public void keyReleased(KeyEvent ke) {
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        
        char c = ke.getKeyChar();
        int keyCode = ke.getKeyCode();
             
        switch(keyCode){
            case KeyEvent.VK_BACK_SPACE:
            case KeyEvent.VK_DELETE:
                try{
                    DeleteImage();
                }catch(IOException e){
                    e.printStackTrace();
                }
                break;
            case KeyEvent.VK_LEFT:
            case KeyEvent.VK_UP:
                try{
                    PreviousImage();
                }catch(IOException e){
                    e.printStackTrace();
                }
                break;
            case KeyEvent.VK_RIGHT:
            case KeyEvent.VK_DOWN:
                try{
                    NextImage();
                }catch(IOException e){
                    e.printStackTrace();
                }
                break;    
            default:
        }
    }
}
